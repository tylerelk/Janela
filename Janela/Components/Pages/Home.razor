@page "/"
@using Janela.Data
@using Janela.Data.Services.Classes
@using Wangkanai.Detection.Models
@inject Wangkanai.Detection.Services.IDetectionService DetectionService
@inject IWeatherService WeatherService
@inject ILocationService LocationService

<PageTitle>Janela</PageTitle>
@if (_errorFlag)
{
    <Alert Color="Color.Danger" Visible Style="z-index: 50;" Dismisable>
        <AlertMessage>Error: </AlertMessage>
        <AlertDescription>
            There was a problem loading weather or location data: @_errorMessage<br/>    
        </AlertDescription>
        <CloseButton/>
    </Alert>
}

@if (_weather == null)
{
    <Loader/>
}
else
{
    
    <div class="w-full -h-screen flex-col gap-2"
         style="background-image: url(@_backgroundImageUrl);
                background-position-y: center;">
        <Window Weather="_weather"/>
        <SectionHeading Content="Detailed Report"/>
        <DetailedReport Weather="_weather"/>
        <SectionHeading Content="Three-Day Forecast"/>
        <ThreeDayForecast Forecast="@_weather.forecast" Location="@($"{_weather.location.name}, {_weather.location.region}")"/>
        @if (_weather.alerts.alert!.Length > 0)
        {
            <SectionHeading Content="Weather Alerts"/>
            <AlertBox WeatherAlerts="_weather.alerts"/>
        }
    </div>
}

@code
{
    private WeatherResponse? _weather;
    private Coordinates? _location;
    private bool _errorFlag = false;
    private string _errorMessage = string.Empty;
    private string? _backgroundImageUrl;

    protected override void OnInitialized()
    {
        Globals.setMobile(DetectionService.Device.Type == Device.Mobile); 
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetWeatherData();
        _errorFlag = false;
    }

    private async Task GetWeatherData()
    {
        try
        {
            if (Globals.Location == null)
            {
                _location = await LocationService.GetCurrentLocation();
                Globals.Location = $"{_location.Latitude},{_location.Longitude}";
            }
            _weather = await WeatherService.GetWeatherAsync(Globals.Location);
            _backgroundImageUrl = await LocationService.GetLocationImageUrl(_weather!.location.name);
            Globals.Condition = _weather!.current.condition.text;
        }
        catch (Exception e)
        {
            _errorFlag = true;
            _errorMessage = e.Message;
        }

        StateHasChanged();
    }
}