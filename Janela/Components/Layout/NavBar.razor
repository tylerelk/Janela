@using Janela.Data
@using Math = System.Math
@inject Globals Globals
@inject Wangkanai.Detection.Services.IDetectionService DetectionService

@if (Globals.IsMobile)
{
    <Bar ThemeContrast="ThemeContrast.Dark" Mode="BarMode.VerticalInline" Style="z-index: 9999">
        <BarBrand>
            <BarLink To="/" TextSize="TextSize.Heading4">
                Janela
            </BarLink>
        </BarBrand>
        <BarMenu>
            <BarStart>
                <BarItem>
                    <BarDropdown>
                        <BarDropdownToggle>Options</BarDropdownToggle>
                        <BarDropdownMenu>
                            <BarDropdownItem>
                                <div class="flex justify-around items-center gap-2">
                                    <input type="text" @bind="_userInput" placeholder="Location" class="rounded-lg" style="color: #000000"/>
                                    <button class="bg-gray-800 text-white font-extralight rounded-lg p-2" @onclick="ChangeLocation">
                                        <Icon Name="IconName.Search"/>
                                    </button>
                                    <button class="bg-gray-800 text-white font-extralight rounded-lg p-2" @onclick="GetCurrentLocation">
                                        <Icon Name="IconName.LocationArrow"/>
                                    </button>
                                </div>
                            </BarDropdownItem>
                            <BarDropdownDivider/>
                            <BarDropdownItem>
                                <div class="w-full h-auto m-auto">
                                    <Label>Cold Point: @((int)(Globals.UseF ? ConvertToF(_coldPoint) : _coldPoint)) @ForC()</Label>
                                    <Field>
                                        <Slider TValue="double" @bind-Value="_coldPoint" Min="-100" Max="100"/>
                                    </Field>
                                    <Label>Hot Point: @((int)(Globals.UseF ? ConvertToF(_hotPoint) : _hotPoint)) @ForC()</Label>
                                    <Field>
                                        <Slider TValue="double" @bind-Value="_hotPoint" Min="-100" Max="100"/>
                                    </Field>
                                    <Button Color="Color.Dark" Clicked="@ChangeHeatPoints">Update</Button>
                                </div>
                            </BarDropdownItem>
                            <BarDropdownDivider/>
                            <BarDropdownItem>
                                <Label>Units:</Label>
                                <Switch TValue="bool" @bind-Checked="@Globals.UseF"><span class="text-white">@(Globals.UseF ? "F\u00b0" : "C\u00b0")</span></Switch>
                            </BarDropdownItem>
                        </BarDropdownMenu>
                    </BarDropdown>
                </BarItem>
            </BarStart>
        </BarMenu>
    </Bar>
}
else
{
    <div class="w-full relative top-0 left-0 h-auto bg-gradient-to-l from-transparent to-gray-800 p-4 flex justify-between items-center" style="z-index: 9999">
        <div class="flex justify-around items-center gap-4">
            <h1 class="text-3xl text-white font-thin">Janela</h1>
            <input type="text" @bind="_userInput" placeholder="Location" class="rounded-lg"/>
            <button class="bg-gray-800 text-white font-extralight rounded-lg p-2" @onclick="ChangeLocation">Change Location</button>
            <button class="bg-gray-800 text-white font-extralight rounded-lg p-2" @onclick="GetCurrentLocation">Current Location</button>
        </div>
        <Offcanvas @ref="_offcanvasRef" ShowBackdrop Placement="Placement.End" Closing="@OnOffcanvasClosing">
            <OffcanvasHeader>
                <Heading Size="HeadingSize.Is2">Options</Heading>
                <CloseButton Clicked="() => _offcanvasRef.Hide()"/>
            </OffcanvasHeader>
            <OffcanvasBody TextColor="TextColor.Light" Background="Background.Dark">
                <div class="w-full h-auto m-auto">
                    <Label>Cold Point:</Label>
                    <Field>
                        <Slider TValue="double" @bind-Value="_coldPoint" Min="-100" Max="100"/>
                        <p>I feel cold at about @((int)(Globals.UseF ? ConvertToF(_coldPoint) : _coldPoint)) @ForC()</p>
                    </Field>
                    <Label>Hot Point:</Label>
                    <Field>
                        <Slider TValue="double" @bind-Value="_hotPoint" Min="-100" Max="100"/>
                        <p>I feel hot at about @((int)(Globals.UseF ? ConvertToF(_hotPoint) : _hotPoint)) @ForC()</p>
                    </Field>
                    <Button Color="Color.Success" Clicked="@ChangeHeatPoints">Update</Button>
                </div>
            </OffcanvasBody>
        </Offcanvas>
        <div class="flex justify-end items-center gap-2">
            <Button Clicked="() => _offcanvasRef.Show()" Color="Color.Dark" Class="animate-pulse">Options</Button>
            <Switch TValue="bool" @bind-Checked="@Globals.UseF"><span class="text-white">@(Globals.UseF ? "F\u00b0" : "C\u00b0")</span></Switch>
        </div>
    </div>
}

@code
{
    private string _userInput = "";
    private double _coldPoint = Globals.ColdPoint;
    private double _hotPoint = Globals.HotPoint;
    private Offcanvas _offcanvasRef = new();
    private bool _cancelClose;
    private bool _loading;

    private Task ChangeLocation()
    {
        if (_userInput == Globals.Location) return Task.CompletedTask;
        Globals.Location = _userInput;
        StateHasChanged();
        _userInput = "";

        return Task.CompletedTask;
    }

    private Task ChangeHeatPoints()
    {
        var c = Globals.UseF ? ConvertToF(_coldPoint) : _coldPoint;
        var h = Globals.UseF ? ConvertToF(_hotPoint) : _hotPoint;
        if (Globals.UseF)
        {
            //(32°F − 32) × 5/9 = 0°C
            c = (c - 32) * 5/9;
            h = (h - 32) * 5/9;
        }
        if (Math.Abs(c - Globals.ColdPoint) > 1) Globals.ColdPoint = (int)c;
        if (Math.Abs(h - Globals.HotPoint) > 1) Globals.HotPoint = (int)h;
        StateHasChanged();
        _offcanvasRef.Hide();
        
        return Task.CompletedTask;
    }

    private double ConvertToF(double val)
    {
        return (val * 5/9) + 32;
    }

    private Task ToggleOffcanvas()
    {
        if (_offcanvasRef.Visible)
        {
            _cancelClose = false;
            return _offcanvasRef.Hide();
        }

        return _offcanvasRef.Show();
    }

    private Task OnOffcanvasClosing(OffcanvasClosingEventArgs e)
    {
        e.Cancel = _cancelClose || e.CloseReason != CloseReason.UserClosing;
        return Task.CompletedTask;
    }

    private string ForC()
    {
        return Globals.UseF ? "\u00b0F" : "\u00b0C";
    }

    private Task GetCurrentLocation()
    {
        Globals.Location = null;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
